library(readxl)
vc <- read_excel("vc_by_state.xlsx", sheet = "2002-2014A")
usethis::use_data(vc,internal=FALSE)
usethis::use_data(vc,internal=FALSE,overwrite = TRUE)
library(readxl)
vc <- read_excel("vc_by_state.xlsx", sheet = "2002-2014A")
vc
usethis::use_data(vc,internal=FALSE)
getwd()
setwd("/Users/xianqu/Documents/GitHub/Xian_Qu/Final_Project/legen/")
library(readxl)
vc <- read_excel("vc_by_state.xlsx", sheet = "2002-2014A")
usethis::use_data(vc,internal=FALSE)
setwd("/Users/xianqu/Documents/GitHub/Xian_Qu/Final_Project/legen/")
library(readxl)
vc <- read_excel("vc_by_state.xlsx", sheet = "2002-2014A")
usethis::use_data(vc,internal=FALSE)
usethis::use_data(vc,internal=FALSE, overwrite = TRUE)
VentureData <- vc
View(VentureData)
library(legen)
VentureData <- vc
vc
usethis::use_data(vc,internal=FALSE, overwrite = TRUE)
VentureData <- data(vc)
HarvardData <- HdDataverse("doi:10.7910/DVN/BMRPVH/0WQQMT", "HARVARDDATA_KEY")
corruption <- locsent("corruption", 2006, 2016)
statepopulation <- statepop("CENSUS_KEY", 2006, 2016, TRUE)
patent <- patent(2006, 2016)
View(corruption)
rename(corruption, date, year)
rename(corruption, "date", "year")
rename(corruption, "year", "date")
corruption <- locsent("corruption", 2006, 2016)
corruption %>%
rename(corruption, "year", "date")
library(tidyverse)
corruption %>%
rename(year = date)
corruption %>%
dplyr::rename(year = date)
View(HarvardData)
corruption %>%
dplyr::rename(
year = date,
state = location)
data(vc)
data(vc)
VentureData <- vc
View(vc)
setwd("/Users/xianqu/Documents/GitHub/Xian_Qu/Final_Project/legen/")
library(readxl)
vc <- read_excel("vc_by_state.xlsx", sheet = "2002-2014A")
usethis::use_data(vc,internal=FALSE, overwrite = TRUE)
data(vc)
View(vc)
library(tidyr)
# The arguments to gather():
# - data: Data object
# - key: Name of new key column (made from names of data columns)
# - value: Name of new value column
# - ...: Names of source columns that contain values
# - factor_key: Treat the new key column as a factor (instead of character vector)
VentureC <- gather(vc, year, vc, 2002:2016, factor_key=TRUE)
library(tidyr)
# The arguments to gather():
# - data: Data object
# - key: Name of new key column (made from names of data columns)
# - value: Name of new value column
# - ...: Names of source columns that contain values
# - factor_key: Treat the new key column as a factor (instead of character vector)
VentureC <- gather(vc, year, vc, c(`2002`:`2016`), factor_key=TRUE)
View(VentureC)
vc %>%
filter(year >= 2006)
library(dplyr)
vc %>%
filter(year >= 2006)
vc %>%
dplyr::filter(year >= 2006)
library(dplyr)
VentureC %>%
dplyr::filter(year >= 2006)
library(dplyr)
VentureC %>%
filter(year >= 2006)
VentureC %>%
dplyr::filter(year > 2006)
VentureC %>%
as.numeric(year) %>%
dplyr::filter(year > 2006)
VentureC$year <- as.numeric(VentureC$year)
VentureC %>%
dplyr::filter(year > 2006)
VentureC$year <- as.numeric(VentureC$year)
VentureC %>%
dplyr::filter(year >= 2006)
VentureC$year <- as.numeric(as.character(VentureC$year))
VentureC %>%
dplyr::filter(year >= 2006)
class(VentureC$year)
VentureC %>%
dplyr::filter(year >= 2006)
View(VentureC)
VentureC <- gather(vc, year, vc, c(`2002`:`2016`), factor_key=TRUE)
View(VentureC)
as.numeric(levels(VentureC$year))[VentureC$year]
VentureC$year <- as.numeric(levels(VentureC$year))[VentureC$year]
VentureC %>%
dplyr::filter(year >= 2006)
VentureC %>%
dplyr::filter(year >= 2006 & year <= 2016)
View(VentureC)
HarvardData %>%
dplyr::rename(state = StateAbbr)
corruption %>%
dplyr::rename(
year = date,
state = location,
trends = hits)
state2abbr(corruption$state)
install.packages("openintro")
library(openintro)
state2abbr(corruption$state)
corruption$state %>%
map(state2abbr())
corruption$state <-
map(state2abbr(state2abbr()))
map(corruption$state, state2abbr())
map(corruption$state, state2abbr(.))
map_chr(corruption$state, state2abbr(.))
class(corruption$state)
View(corruption)
corruption %>%
dplyr::rename(
year = date,
state = location,
trends = hits)
View(corruption)
corruption <- corruption %>%
dplyr::rename(
year = date,
state = location,
trends = hits)
HarvardData <- HarvardData %>%
dplyr::rename(state = StateAbbr)
map_chr(corruption$state, state2abbr(.))
View(corruption)
corruption$state <- state.abb(corruption$state)
library(datasets)
corruption$state <- state.abb(corruption$state)
install.packages("datasets")
library(datasets)
corruption$state <- state.abb(corruption$state)
corruption$state <- state.abb[corruption$state]
View(VentureC)
View(statepopulation)
#Convert full state names to abbreviations
statepopulation$state <- state.abb[statepopulation$state]
View(statepopulation)
View(patent)
patent <- patent %>%
dplyr::rename(
state = CODE,
patentgranted = TOTALS)
View(patent)
legen <- merge(statepopulation, patent, by=c("year","state"))
View(legen)
View(HarvardData)
HarvardData <- HarvardData %>%
dplyr::rename(state = StateAbbr) %>%
dplyr::filter(year >= 2006 & year <= 2016)
HarvardData <- HarvardData %>%
#dplyr::rename(state = StateAbbr) %>%
dplyr::filter(year >= 2006 & year <= 2016)
View(HarvardData)
View(corruption)
legen <- merge(corruption, statepopulation, patent, by=c("year","state"))
legen <- merge(corruption, HarvardData, by=c("year","state"))
View(legen)
legen <- merge(corruption, HarvardData, by=c("year","state"))
View(legen)
legen1 <- merge(statepopulation, patent, by=c("year","state"))
legen2 <- merge(corruption, HarvardData, by=c("year","state"))
legen <- merge(legen1, legen2, by=c("year","state"))
View(legen)
ggplot(legen, aes(x = year)) +
geom_line(aes(y = obs), colour="blue") +
geom_line(aes(y = popest), colour = "grey") +
ylab(label="Variables of Interest") +
xlab("Year")
library(ggplot2)
ggplot(legen, aes(x = year)) +
geom_line(aes(y = obs), colour="blue") +
geom_line(aes(y = popest), colour = "grey") +
ylab(label="Variables of Interest") +
xlab("Year")
library(ggplot2)
ggplot(legen, aes(x = year)) +
geom_line(aes(y = obs), colour="blue") +
geom_line(aes(y = popest), colour = "grey") +
scale_x_continuous(limits=c(0, 1200), breaks=c(0, 400, 800, 1200)) +
scale_y_continuous(limits=c(0, 1200), breaks=c(0, 400, 800, 1200))
library(ggplot2)
ggplot(legen, aes(x = year)) +
geom_line(aes(y = obs), colour="blue") +
geom_line(aes(y = popest), colour = "grey") +
scale_x_continuous(limits=c(0, 1200), breaks=c(0, 400, 800, 1200)) +
scale_y_continuous(limits=c(0, 1200), breaks=c(0, 400, 800, 1200)) +
ylab(label="Variables of Interest") +
xlab("Year")
library(ggplot2)
ggplot(legen, aes(x = year)) +
geom_line(aes(y = as.numeric(obs)), colour="blue") +
geom_line(aes(y = as.numeric(popest)), colour = "grey") +
scale_x_continuous(limits=c(0, 1200), breaks=c(0, 400, 800, 1200)) +
scale_y_continuous(limits=c(0, 1200), breaks=c(0, 400, 800, 1200)) +
ylab(label="Variables of Interest") +
xlab("Year")
library(ggplot2)
ggplot(legen, aes(x = as.numeric(year))) +
geom_line(aes(y = as.numeric(obs)), colour="blue") +
geom_line(aes(y = as.numeric(popest)), colour = "grey") +
scale_x_continuous(limits=c(0, 1200), breaks=c(0, 400, 800, 1200)) +
scale_y_continuous(limits=c(0, 1200), breaks=c(0, 400, 800, 1200)) +
ylab(label="Variables of Interest") +
xlab("Year")
library(ggplot2)
ggplot(legen, aes(x = as.numeric(year))) +
geom_line(aes(y = as.numeric(obs)), colour="blue") +
geom_line(aes(y = as.numeric(popest)), colour = "grey") +
ylab(label="Variables of Interest") +
xlab("Year")
summary(legen)
table(legen)
summary(legen)
ggplot(legen, aes(year, obs)) +
geom_line() +
scale_x_date(format = "%b-%Y") +
xlab("Number of entreprenurs") +
ylab("Year")
ggplot(legen, aes(year, obs)) +
geom_line() +
scale_x_date(format = "%Y") +
xlab("Number of entreprenurs") +
ylab("Year")
time.series <- ts(legen[, -1], start=2006, end=2016)
View(time.series)
plot(legen, xlab = "Year")
plot(legen, xlab = "year")
ggplot(data = tolerance, aes(x = year, y = obs, group = state)) +
geom_point()
ggplot(data = legen, aes(x = year, y = obs, group = state)) +
geom_point()
ggplot(data = legen, aes(x = year, y = obs, group = state)) +
geom_line()
ggplot(data = legen, aes(x = year, y = obs)) +
geom_line()
ggplot(data = legen, aes(x = year, y = obs, group = state)) +
geom_line()
ggplot(data = legen, aes(x = year, y = trends, group = state)) +
geom_line()
ggplot(data = legen, aes(x = year, y = trends, color = state)) +
geom_line()
ggplot(data = legen, aes(x = year, y = trends, color = state)) +
geom_points()
ggplot(data = legen, aes(x = year, y = trends, color = state)) +
geom_point()
ggplot(data = legen, aes(x = year, y = trends, color = state)) +
geom_line()
ggplot(data = legen, aes(x = year, y = trends, group = state)) +
geom_line()
#Searches for corruption in each state across time
ggplot(data = legen, aes(x = year, y = trends, group = state, color = state)) +
geom_line()
save(legen,file=”data/legen.rda”)
save(legen,file="data/legen.rda")
save(legen,file="data/legen.rda")
usethis::use_data(legen,internal=FALSE)
usethis::use_data(VentureC,internal=TRUE)
usethis::use_data(VentureC,internal=TRUE, overwrite = TRUE)
load("~/Documents/GitHub/Xian_Qu/Final_Project/legen/R/sysdata.rda")
usethis::use_data(legen,internal=TRUE, overwrite = TRUE)
#Save the data to the data folder
usethis::use_data(legen,internal=FALSE, overwrite = TRUE)
linearMod <- plm(obs ~ popest + patentgranted + trends, data=pdata, model = "random")
library(plm)
linearMod <- plm(obs ~ popest + patentgranted + trends, data=pdata, model = "random")
pdata <- plm.data(legen, index = c("state", "year"))
pdata <- plm.frame(legen, index = c("state", "year"))
library(plm)
pdata <- plm.frame(legen, index = c("state", "year"))
pdata <- plm.data(legen, index = c("state", "year"))
pdata <- pdata.frame(legen, index = c("state", "year"))
library(plm)
linearMod <- plm(obs ~ popest + patentgranted + trends, data=pdata, model = "random")
library(plm)
linearMod <- plm(obs ~ popest + patentgranted + trends, data=pdata, model = "pooling")
library(plm)
linearMod <- plm(obs ~ popest + patentgranted + trends, data=pdata, model = "pooling")
summary(linearMod)
library(plm)
linearMod <- lm(obs ~ popest + patentgranted + trends, data=legen)
summary(linearMod)
linearMod <- lm(obs ~ popest + patentgranted + trends, data=legen)
print(linearMod)
View(pdata)
class(legen$popest)
View(corruption)
corruption$trends <- as.numeric(levels(corruption$trends))[corruption$trends]
View(statepopulation)
statepopulation$popest <- as.numeric(levels(statepopulation$popest))[statepopulation$popest]
View(patent)
patent$patentgranted <- as.numeric(levels(patent$patentgranted))[patent$patentgranted]
legen1 <- merge(statepopulation, patent, by=c("year","state"))
legen2 <- merge(corruption, HarvardData, by=c("year","state"))
legen <- merge(legen1, legen2, by=c("year","state"))
summary(legen)
patent <- patent(2006, 2016)
patent <- patent %>%
dplyr::rename(
state = CODE,
patentgranted = TOTALS)
class(patent$patentgranted)
patent$patentgranted <- as.numeric(patent$patentgranted)[patent$patentgranted]
class(patent$patentgranted)
class(corruption$trends)
corruption <- locsent("corruption", 2006, 2016)
#Rename columns
corruption <- corruption %>%
dplyr::rename(
year = date,
state = location,
trends = hits)
#Convert full state names to abbreviations
library(datasets)
corruption$state <- state.abb[corruption$state]
class(corruption$trends)
corruption$trends <- as.numeric(corruption$trends)[corruption$trends]
class(corruption$trends)
legen1 <- merge(statepopulation, patent, by=c("year","state"))
legen2 <- merge(corruption, HarvardData, by=c("year","state"))
legen <- merge(legen1, legen2, by=c("year","state"))
summary(legen)
View(patent)
patent <- patent(2006, 2016)
patent <- patent %>%
dplyr::rename(
state = CODE,
patentgranted = TOTALS)
class(patent$patentgranted)
test <- as.numeric(patent$patentgranted)[patent$patentgranted]
test
test <- as.numeric(as.character(patent$patentgranted))[patent$patentgranted]
test
test <- as.numeric(as.factor(patent$patentgranted))[patent$patentgranted]
test
class(patent$patentgranted)
typeof(patent$patentgranted)
test <- as.numeric(as.factor(patent$patentgranted))
test
patent$patentgranted <- as.numeric(as.factor(patent$patentgranted))
class(patent$patentgranted)
legen1 <- merge(statepopulation, patent, by=c("year","state"))
legen2 <- merge(corruption, HarvardData, by=c("year","state"))
legen <- merge(legen1, legen2, by=c("year","state"))
summary(legen)
View(patent)
pdata <- pdata.frame(legen, index = c("state", "year"))
linearMod <- plm(obs ~ popest + patentgranted + trends, data=pdata, modeling = "pooling")
print(linearMod)
linearMod <- plm(obs ~ popest + patentgranted + trends, data=pdata, modeling = "pooling")
summary(linearMod)
linearMod <- plm(obs ~ popest + patentgranted + trends, data=pdata, modeling = "random")
summary(linearMod)
pdata <- pdata.frame(legen, index = c("state", "year"))
linearMod <- plm(obs ~ popest + patentgranted + trends, data=pdata, modeling = "random")
summary(linearMod)
devtools::build_vignettes()
devtools:: check()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::clean_vignettes()
devtools::build_vignettes()
devtools::build()
devtools::clean_vignettes()
devtools::build_vignettes()
devtools::build()
library(legen)
#Searches for corruption in each state across time
library(ggplot2)
ggplot(data = legen, aes(x = year, y = trends, group = state, color = state)) +
geom_line()
library(datasets)
corruption$state <- state.abb[corruption$state]
library(legen)
data(vc)
#Convert the dataframe from wide to long
library(tidyr)
VentureC <- gather(vc, year, vc, c(`2002`:`2016`), factor_key=TRUE)
#Select data from 2006 to 2016
VentureC$year <- as.numeric(levels(VentureC$year))[VentureC$year]
VentureC %>%
dplyr::filter(year >= 2006 & year <= 2016)
HarvardData <- HdDataverse("doi:10.7910/DVN/BMRPVH/0WQQMT", "HARVARDDATA_KEY")
HarvardData <- HarvardData %>%
dplyr::rename(state = StateAbbr) %>%
dplyr::filter(year >= 2006 & year <= 2016)
corruption <- locsent("corruption", 2006, 2016)
#Rename columns
corruption <- corruption %>%
dplyr::rename(
year = date,
state = location,
trends = hits)
#Convert full state names to abbreviations
library(datasets)
corruption$state <- state.abb[corruption$state]
corruption$trends <- as.numeric(corruption$trends)[corruption$trends]
statepopulation <- statepop("CENSUS_KEY", 2006, 2016, TRUE)
#Convert full state names to abbreviations
statepopulation$state <- state.abb[statepopulation$state]
statepopulation$popest <- as.numeric(levels(statepopulation$popest))[statepopulation$popest]
patent <- patent(2006, 2016)
patent <- patent %>%
dplyr::rename(
state = CODE,
patentgranted = TOTALS)
patent$patentgranted <- as.numeric(as.factor(patent$patentgranted))
legen1 <- merge(statepopulation, patent, by=c("year","state"))
legen2 <- merge(corruption, HarvardData, by=c("year","state"))
legen <- merge(legen1, legen2, by=c("year","state"))
summary(legen)
#Searches for corruption in each state across time
library(ggplot2)
ggplot(data = legen, aes(x = year, y = trends, group = state, color = state)) +
geom_line()
pdata <- pdata.frame(legen, index = c("state", "year"))
library(plm)
pdata <- pdata.frame(legen, index = c("state", "year"))
library(plm)
pdata <- pdata.frame(legen, index = c("state", "year"))
linearMod <- plm(obs ~ popest + patentgranted + trends, data=pdata, modeling = "random")
summary(linearMod)
devtools::clean_vignettes()
devtools::build_vignettes()
devtools::build()
devtools::check()
devtools::check()
load("~/Documents/GitHub/Xian_Qu/Final_Project/legen/R/sysdata.rda")
devtools::check()
document()
devtools::document()
roxygen2::roxygenize('.', roclets=c('rd', 'collate', 'namespace'))
devtools::document()
devtools::document()
devtools::check()
document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
load("~/Documents/GitHub/Xian_Qu/Final_Project/legen/.RData")
devtools::add_data(vc)
add_data(vc)
usethis::add_data(vc)
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
globalVariables(names(your_data))
globalVariables(names(legen))
globalVariables(names(patent)))
globalVariables(names(patent))
devtools::document()
devtools::check()
R.home(component = "home")
usethis::edit_r_environ()
